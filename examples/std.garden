; vim: filetype=racket

; @std is a immutable module collection containing helpers and commonly used abstractions

; cli holds interactions for the command line, such as
(@std/cli/args); the list of arguments of the script invocation
(@std/cli/flags); holds all options passed to the runtime as a key value store `pg script.garden -- -t=5 --month=april->{ t=5 month="april" }
(@std/cli/rest); holds all non option arguments as an array

; fmt allows for pretty printing values and to do structured formatting into
; strings
(@let user "teo")
(@std/fmt/printf "hello world: {}[{}]" user (@len user)) ; print to stdout
(@std/fmt/sprintf "hello world: {}[{}]" user (@len user)) ; return as string

; runtime allows for programatic virtual machine interactions
(@std/runtime/gc/clean) ; clean triggers a garbage collection cycle normaly only being triggered by the allocator inside of the vm
(@std/runtime/gc/stop) ; stop stops the gc from running again in the current execution
(@std/runtime/stats/mem) ; returns memory statistics: {current: int, allocated: int}

; optionals
(@let opt_none (@None))
(@let opt_some (@Some []))
(@std/opt/or opt_none "anything else") ; -> "anything else"
(@std/opt/unwrap opt_some) ; -> []
(@std/opt/expect opt_some "would panic with this message") ; -> []
(@std/opt/some opt_some) ; -> true 
(@std/opt/none opt_none) ; -> true 

; object contains helper functions for working with objects
(@let obj { 
      'key1 (@None) 
      'key2 (@None) 
    })
(@std/fmt/println obj/key1) ; -> Option/None
(@std/object/keys obj) ; -> ["key1", "key2"]
(@std/object/values obj) ; -> [Option/None, Option/None]
(@std/object/entries obj) ; -> [["key1", Option/None], ["key2", Option/None]]

; encoding allows for serializing and deserializing purple garden values into different formats
(@std/encoding/json { 'key "value" }) ; { "key": "value" }

; '<ident> produces a literal identifier,
; similar to a string, but omitting the need for "",
; since they do fit a different usecase in a semantic sense
(@std/encoding/csv 
  ({ 'name "user1" 'age 25 } 
   { 'name "user2" 'age 14 }
   { 'name "user3" 'age 18 'role "admin" }
   { 'name "user4" }))
  ; produces:
  ;
  ; name,age,role
  ; user1,25,
  ; user2,14,
  ; user3,18,admin
  ; user4,,

(@std/encoding/html 
  ('div 
   ('p 
    ('b "This is a bold paragraph in a div"))))
    ; <div>
    ;     <p>
    ;         <b>This is a bold paragraph in a div</b>
    ;     </p>
    ; </div>
