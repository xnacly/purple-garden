# vim: filetype=python
fn add3 :: arg1 arg2 arg3  {
    arg1+arg2+arg3
}
std::println(add3(3.1415 3.1415 3.1415))

fn greeting :: greetee {
    std::println("hello world to:" greetee)
} 
greeting("teo") # hello world to: user


# tail calls 
fn inc :: x {x + 1}
fn call1 :: x {inc(x)}
fn call2 :: x {call1(x)}
fn call3 :: x {call2(x)}
fn call4 :: x {call3(x)}
fn call5 :: x {call4(x)}
std::println(call5(0))

fn tuplify :: v {
    [type(v) len(v)]
} 
std::println(tuplify("hello world")) # [str, 11]

fn f1 :: a {
    match {
        a<100000 {
            f1(a+1)
        }
        {  }
    }
}
f1(0)


# compute n! with acumulator a
fn factorial :: n a {
    match {
        n = 0 { a }
        { factorial(n-1 n*a) }
    }
}

var n = 18
std::println(factorial(n 1))

fn bin_step :: n k i r {
    match {
        i = k { std::Some(r) }
        {
            bin_step(n k i+1 r * (n-i)/(i+1))
        }
    }
}

fn bin :: n k {
    match {
        k < 0 { std::None() }
        k = 0 { std::Some(1) }
        k = n { std::Some(1) }
        {
            # Apply symmetry: k = min(k, n-k)
            var kk = match {
                n - k < k { n - k }
                { k }
            }
            bin_step(n kk 0 1)
        }
    }
}

std::assert(bin(1 1) = 1)
std::assert(bin(1 0) = 1)
std::assert(bin(6 3) = 20)
std::assert(bin(6 5) = 6)
std::assert(bin(10 5) = 252)
std::assert(bin(20 15) = 15504)
std::assert(bin(49 6) = 13983816)
